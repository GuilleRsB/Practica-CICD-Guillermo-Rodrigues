version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/python:3.8
  snyk-executor:
    docker:
      - image: circleci/python:3.8
  sonar-executor:
    docker:
      - image: sonarsource/sonar-scanner-cli:latest

jobs:
  # --------------------------
  # Job: build
  # Construcción de la imagen Docker.
  # --------------------------
  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Instalar dependencias
          command: pip install -r requirements.txt
      - run:
          name: Construir imagen Docker
          command: docker build -t dias-vividos-cli .
      - persist_to_workspace:
          root: .
          paths:
            - .

  # --------------------------
  # Job: test
  # Ejecución de pruebas unitarias y cobertura de código.
  # --------------------------
  test:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias y herramientas de test
          command: |
            pip install -r requirements.txt
            pip install pytest pytest-cov
      - run:
          name: Ejecutar tests con cobertura
          command: pytest --cov=. --cov-report xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage

  # --------------------------
  # Job: lint
  # Análisis de calidad de código con Flake8.
  # --------------------------
  lint:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Instalar Flake8
          command: pip install flake8
      - run:
          name: Ejecutar lint
          command: flake8 .

  # --------------------------
  # Job: static_analysis
  # Análisis estático de seguridad con Bandit.
  # --------------------------
  static_analysis:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Instalar Bandit
          command: pip install bandit
      - run:
          name: Ejecutar análisis estático
          command: bandit -r .

  # --------------------------
  # Job: vulnerability_scan
  # Análisis de vulnerabilidades con Snyk.
  # --------------------------
  vulnerability_scan:
    executor: snyk-executor
    steps:
      - checkout
      - run:
          name: Instalar Node.js y npm
          command: |
            sudo apt-get update && sudo apt-get install -y nodejs npm
      - run:
          name: Instalar pip y dependencias
          command: |
            sudo apt-get update && sudo apt-get install -y python3-pip
            pip install -r requirements.txt
      - run:
          name: Instalar Snyk CLI
          command: sudo npm install -g snyk
      - run:
          name: Autenticar con Snyk
          command: snyk auth $SNYK_TOKEN
      - run:
          name: Ejecutar análisis de vulnerabilidades con Snyk
          command: snyk test --all-projects
      - run:
          name: Aplicar correcciones automáticas con Snyk
          command: snyk fix || echo "No se pudieron aplicar correcciones automáticamente"

  # --------------------------
  # Job: sonar_scan
  # Análisis de código con SonarScanner en SonarCloud.
  # --------------------------
  sonar_scan:
    executor: sonar-executor
    steps:
      - checkout
      - run:
          name: Ejecutar SonarScanner
          command: |
            sonar-scanner \
              -Dsonar.projectKey=GuilleRsB_Practica-CICD-Guillermo-Rodrigues \
              -Dsonar.sources=. \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_LOGIN \
              -Dsonar.organization=guillersb

  # --------------------------
  # Job: artifact
  # Construcción y publicación de la imagen Docker en Docker Hub.
  # --------------------------
  artifact:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Autenticarse en Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Construir y publicar imagen Docker
          command: |
            docker build -t dias-vividos-cli .
            docker tag dias-vividos-cli $DOCKERHUB_USERNAME/dias-vividos-cli:latest
            docker push $DOCKERHUB_USERNAME/dias-vividos-cli:latest
            docker save dias-vividos-cli > dias-vividos-cli.tar
      - store_artifacts:
          path: dias-vividos-cli.tar
          destination: artifact

  # --------------------------
  # Job: deploy
  # Despliegue en Kubernetes con ArgoCD.
  # --------------------------
  deploy:
    machine: true
    steps:
      - checkout
      - run:
          name: Instalar ArgoCD CLI
          command: |
            curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd
            sudo mv argocd /usr/local/bin/argocd
            argocd version
      - run:
          name: Autenticarse en ArgoCD
          command: |
            echo "Conectando a ARGOCD_SERVER=$ARGOCD_SERVER"
            argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
      - run:
          name: Sincronizar aplicación en ArgoCD
          command: argocd app sync dias-vividos-cli
      - run:
          name: Verificar estado de la aplicación
          command: argocd app get dias-vividos-cli
      - run:
          name: (Opcional) Eliminar clúster kind
          command: kind delete cluster --name dias-vividos-cluster

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - static_analysis:
          requires:
            - build
      - vulnerability_scan:
          requires:
            - build
      - sonar_scan:
          requires:
            - build
      - artifact:
          filters:
            branches:
              only: main
          requires:
            - test
            - lint
            - static_analysis
            - sonar_scan
            - vulnerability_scan
      - deploy:
          filters:
            branches:
              only: main
          requires:
            - artifact
