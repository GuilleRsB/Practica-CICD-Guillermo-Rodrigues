version: 2.1

jobs:
  # Job: Construcción de la imagen Docker
  build:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker   # Habilita Docker remoto para este job
      - run:
          name: Instalar dependencias de la aplicación
          command: pip install -r requirements.txt
      - run:
          name: Construir la imagen Docker
          command: docker build -t dias-vividos-cli .
      - persist_to_workspace:
          root: .
          paths:
            - .

  # Job: Ejecutar pruebas y generar reporte de cobertura
  test:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Instalar dependencias de prueba
          command: |
            pip install -r requirements.txt
            pip install pytest pytest-cov
      - run:
          name: Ejecutar pruebas con cobertura
          command: pytest --cov=. --cov-report xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage

  # Job: Linting con Flake8
  lint:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Instalar Flake8
          command: pip install flake8
      - run:
          name: Ejecutar linting
          command: flake8 .

  # Job: Análisis estático con Bandit
  static_analysis:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Instalar Bandit
          command: pip install bandit
      - run:
          name: Ejecutar análisis estático
          command: bandit -r .

  # Job: Análisis de código y vulnerabilidades con SonarQube
  sonar_scan:
    docker:
      - image: openjdk:17-slim   # Usamos la imagen oficial de OpenJDK 17
    steps:
      - checkout
      - run:
          name: Instalar wget y unzip
          command: |
            apt-get update && apt-get install -y wget unzip
      - run:
          name: Verificar versión de Java
          command: java -version
      - run:
          name: Descargar e instalar SonarScanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
            unzip sonar-scanner-cli-4.8.0.2856-linux.zip
            ./sonar-scanner-4.8.0.2856-linux/bin/sonar-scanner \
              -Dsonar.projectKey=dias-vividos-cli \
              -Dsonar.sources=. \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_LOGIN

  # Job: Generar y publicar el artefacto (imagen Docker) (solo en la rama main)
  artifact:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker  # Permite ejecutar comandos Docker
      - run:
          name: Autenticarse en Docker Hub
          command: |
            echo "Autenticando en Docker Hub..."
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
      - run:
          name: Generar y publicar artefacto (imagen Docker)
          command: |
            echo "Construyendo la imagen Docker..."
            docker build -t dias-vividos-cli .
            echo "Etiquetando la imagen..."
            docker tag dias-vividos-cli $DOCKERHUB_USERNAME/dias-vividos-cli:latest
            echo "Publicando la imagen en Docker Hub..."
            docker push $DOCKERHUB_USERNAME/dias-vividos-cli:latest
            echo "Guardando la imagen en un archivo tar..."
            docker save dias-vividos-cli > dias-vividos-cli.tar
      - store_artifacts:
          path: dias-vividos-cli.tar
          destination: artifact

  # Job: Despliegue en Kubernetes usando kind y ArgoCD (solo en la rama main)
  deploy:
    machine: true  # Se utiliza "machine" para tener acceso nativo a Docker (necesario para kind)
    steps:
      - checkout
      - run:
          name: Instalar kind
          command: |
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind
      - run:
          name: Crear clúster kind
          command: kind create cluster --name dias-vividos-cluster
      - run:
          name: Desplegar en Kubernetes vía ArgoCD
          command: |
            # Se asume que la CLI de ArgoCD ya está instalada y configurada en la máquina
            argocd app sync dias-vividos-cli --grpc-web
      - run:
          name: Eliminar clúster kind (opcional)
          command: kind delete cluster --name dias-vividos-cluster

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - static_analysis:
          requires:
            - build
      - sonar_scan:
          requires:
            - build
      - artifact:
          filters:
            branches:
              only: main
          requires:
            - test
            - lint
            - static_analysis
            - sonar_scan
      - deploy:
          filters:
            branches:
              only: main
          requires:
            - artifact