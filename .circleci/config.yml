version: 2.1

jobs:
  # Job para la construcción de la imagen Docker
  build:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Instalar dependencias de la aplicación
          command: pip install -r requirements.txt
      - run:
          name: Construir la imagen Docker
          command: docker build -t dias-vividos-cli .
      - persist_to_workspace:
          root: .
          paths:
            - .

  # Job para ejecutar pruebas y generar reporte de cobertura
  test:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Instalar dependencias de prueba
          command: |
            pip install -r requirements.txt
            pip install pytest pytest-cov
      - run:
          name: Ejecutar pruebas con cobertura
          command: pytest --cov=. --cov-report xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage

  # Job para ejecutar linting con Flake8
  lint:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Instalar Flake8
          command: pip install flake8
      - run:
          name: Ejecutar linting
          command: flake8 .

  # Job para análisis estático de código con Bandit
  static_analysis:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Instalar Bandit
          command: pip install bandit
      - run:
          name: Ejecutar análisis estático
          command: bandit -r .

  # Job para análisis de vulnerabilidades con Snyk
  snyk_scan:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Instalar Snyk
          command: pip install snyk
      - run:
          name: Ejecutar análisis de vulnerabilidades
          command: snyk test

  # Job para generar el artefacto de la aplicación (solo en master/main)
  artifact:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Generar artefacto (imagen Docker)
          command: |
            docker build -t dias-vividos-cli .
            docker save dias-vividos-cli > dias-vividos-cli.tar
      - store_artifacts:
          path: dias-vividos-cli.tar
          destination: artifact

  # Job para desplegar en Kubernetes usando ArgoCD (solo en master/main)
  deploy:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Desplegar en Kubernetes vía ArgoCD
          command: |
            # Se asume que las credenciales y el CLI de ArgoCD están configurados
            argocd app sync dias-vividos-cli --grpc-web

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - static_analysis:
          requires:
            - build
      - snyk_scan:
          requires:
            - build
      - artifact:
          filters:
            branches:
              only: master
          requires:
            - test
            - lint
            - static_analysis
            - snyk_scan
      - deploy:
          filters:
            branches:
              only: master
          requires:
            - artifact
