version: 2.1

executors:
#  argocd-executor:
#    docker:
#    - image: bitnami/argo-cd:latest
  docker-executor:
    docker:
      - image: circleci/python:3.8
  snyk-executor:
    docker:
      - image: circleci/python:3.8
  sonar-executor:
    docker:
      - image: sonarsource/sonar-scanner-cli:latest

jobs:
  # --------------------------
  # Job: build
  # Construcción de la imagen Docker.
  # --------------------------
  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Instalar dependencias
          command: pip install -r requirements.txt
      - run:
          name: Construir imagen Docker
          command: docker build -t dias-vividos-cli .
      - persist_to_workspace:
          root: .
          paths:
            - .

  # --------------------------
  # Job: test
  # Ejecución de pruebas unitarias y cobertura de código.
  # --------------------------
  test:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias y herramientas de test
          command: |
            pip install -r requirements.txt
            pip install pytest pytest-cov
      - run:
          name: Ejecutar tests con cobertura
          command: pytest --cov=. --cov-report xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage

  # --------------------------
  # Job: lint
  # Análisis de calidad de código con Flake8.
  # --------------------------
  lint:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Instalar Flake8
          command: pip install flake8
      - run:
          name: Ejecutar lint
          command: flake8 .

  # --------------------------
  # Job: static_analysis
  # Análisis estático de seguridad con Bandit.
  # --------------------------
  static_analysis:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Instalar Bandit
          command: pip install bandit
      - run:
          name: Ejecutar análisis estático
          command: bandit -r .

  # --------------------------
  # Job: vulnerability_scan
  # Análisis de vulnerabilidades con Snyk.
  # --------------------------
  vulnerability_scan:
    executor: snyk-executor
    steps:
      - checkout
      - run:
          name: Instalar Node.js y npm
          command: |
            sudo apt-get update && sudo apt-get install -y nodejs npm
      - run:
          name: Instalar pip y dependencias
          command: |
            sudo apt-get update && sudo apt-get install -y python3-pip
            pip install -r requirements.txt
      - run:
          name: Instalar Snyk CLI
          command: sudo npm install -g snyk
      - run:
          name: Autenticar con Snyk
          command: snyk auth $SNYK_TOKEN
      - run:
          name: Ejecutar análisis de vulnerabilidades con Snyk
          command: snyk test --all-projects
      - run:
          name: Aplicar correcciones automáticas con Snyk
          command: snyk fix || echo "No se pudieron aplicar correcciones automáticamente"

  # --------------------------
  # Job: sonar_scan
  # Análisis de código con SonarScanner en SonarCloud.
  # --------------------------
  sonar_scan:
    executor: sonar-executor
    steps:
      - checkout
      - run:
          name: Ejecutar SonarScanner
          command: |
            sonar-scanner \
              -Dsonar.projectKey=GuilleRsB_Practica-CICD-Guillermo-Rodrigues \
              -Dsonar.sources=. \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_LOGIN \
              -Dsonar.organization=guillersb

  # --------------------------
  # Job: artifact
  # Construcción y publicación de la imagen Docker en Docker Hub.
  # --------------------------
  artifact:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Autenticarse en Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Construir y publicar imagen Docker
          command: |
            docker build -t dias-vividos-cli .
            docker tag dias-vividos-cli $DOCKERHUB_USERNAME/dias-vividos-cli:latest
            docker push $DOCKERHUB_USERNAME/dias-vividos-cli:latest
            docker save dias-vividos-cli > dias-vividos-cli.tar
      - store_artifacts:
          path: dias-vividos-cli.tar
          destination: artifact

  # --------------------------
  # Job: deploy
  # Despliegue en Kubernetes con ArgoCD.
  # --------------------------
  deploy:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Verificar Docker
          command: |
            docker --version || echo "Docker no está disponible"
            docker info || echo "No se pudo acceder a Docker"
      - run:
          name: Instalar dependencias (curl, bash, kubectl)
          command: |
            sudo apt-get update && sudo apt-get install -y curl bash
      - run:
          name: Instalar kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
      - run:
          name: Crear clúster Kubernetes con Kind
          command: |
            sudo apt-get install -y ca-certificates curl gnupg lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.14.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind
            kind create cluster --name dias-vividos-cluster
      - run:
          name: Instalar ArgoCD CLI
          command: |
            curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd
            sudo mv argocd /usr/local/bin/argocd
      - run:
          name: Autenticarse en ArgoCD
          command: |
             argocd login argocd.local --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
      #- run:
      #    name: Habilitar port-forward para ArgoCD
      #    background: true
      #    command: kubectl port-forward svc/argocd-server -n argocd 52094:80 &
      #- run:
      #    name: Esperar a que el puerto esté disponible
      #    command: sleep 30 # Esperar 5 segundos antes de intentar conectarse
      #- run:
      #    name: Verificar conectividad al servidor de ArgoCD
      #    command: |
      #      kubectl get all --namespace argocd
      #      curl -k https://127.0.0.1:52094 || echo "No se pudo conectar a 127.0.0.1:52094"
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - static_analysis:
          requires:
            - build
      - vulnerability_scan:
          requires:
            - build
      - sonar_scan:
          requires:
            - build
      - artifact:
          filters:
            branches:
              only: 
                - main
          requires:
            - test
            - lint
            - static_analysis
            - sonar_scan
            - vulnerability_scan
      - deploy:
          filters:
            branches:
              only:
                - main
          requires:
            - artifact
