# Versión de la configuración de CircleCI
version: 2.1

jobs:
  # --------------------------
  # Job: build
  # Construye la imagen Docker de la aplicación.
  # --------------------------
  build:
    docker:
      - image: circleci/python:3.8  # Imagen base con Python 3.8
    steps:
      - checkout  # Clona el repositorio
      - setup_remote_docker  # Habilita Docker remoto para construir imágenes
      - run:
          name: Instalar dependencias de la aplicación
          command: pip install -r requirements.txt
      - run:
          name: Construir la imagen Docker
          command: docker build -t dias-vividos-cli .
      - persist_to_workspace:
          root: .
          paths:
            - .  # Persiste el workspace para los jobs posteriores

  # --------------------------
  # Job: test
  # Ejecuta las pruebas unitarias y genera el reporte de cobertura.
  # --------------------------
  test:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Instalar dependencias de prueba y herramientas
          command: |
            pip install -r requirements.txt
            pip install pytest pytest-cov
      - run:
          name: Ejecutar pruebas con cobertura
          command: pytest --cov=. --cov-report xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage  # Guarda el reporte de cobertura para su revisión

  # --------------------------
  # Job: lint
  # Ejecuta Flake8 para análisis de estilo y calidad de código.
  # --------------------------
  lint:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Instalar Flake8
          command: pip install flake8
      - run:
          name: Ejecutar linting
          command: flake8 .

  # --------------------------
  # Job: static_analysis
  # Realiza análisis estático de seguridad del código usando Bandit.
  # --------------------------
  static_analysis:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Instalar Bandit
          command: pip install bandit
      - run:
          name: Ejecutar análisis estático
          command: bandit -r .

  # --------------------------
  # Job: sonar_scan
  # Ejecuta el análisis de código con SonarScanner en SonarCloud.
  # Descarga SonarScanner, lo descomprime y lo ejecuta.
  # Requiere definir las variables SONAR_HOST_URL y SONAR_LOGIN en CircleCI.
  # IMPORTANTE: Se usa la imagen cimg/openjdk:17.0.8 para usar Java 17.
  # --------------------------
  sonar_scan:
    docker:
      - image: cimg/openjdk:17.0.8  # Imagen con Java 17
    steps:
      - checkout
      - run:
          name: Verificar versión de Java
          command: java -version
      - run:
          name: Descargar e instalar SonarScanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
            unzip sonar-scanner-cli-4.8.0.2856-linux.zip
            ./sonar-scanner-4.8.0.2856-linux/bin/sonar-scanner \
              -Dsonar.projectKey=dias-vividos-cli \
              -Dsonar.sources
