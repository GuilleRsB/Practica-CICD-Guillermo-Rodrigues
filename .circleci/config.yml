version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/python:3.8
  snyk-executor:
    docker:
      - image: circleci/python:3.8
  sonar-executor:
    docker:
      - image: sonarsource/sonar-scanner-cli:latest

jobs:
  build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Instalar dependencias
          command: pip install -r requirements.txt
      - run:
          name: Construir imagen Docker
          command: docker build -t dias-vividos-cli .

  test:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias y herramientas de test
          command: |
            pip install -r requirements.txt
            pip install pytest pytest-cov
      - run:
          name: Ejecutar tests con cobertura
          command: pytest --cov=app --cov-report=xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage

  lint:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Instalar Flake8
          command: pip install flake8
      - run:
          name: Ejecutar lint
          command: flake8 .

  static_analysis:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Instalar Bandit
          command: pip install bandit
      - run:
          name: Ejecutar análisis estático
          command: bandit -r .

  vulnerability_scan:
    executor: snyk-executor
    steps:
      - checkout
      - run:
          name: Instalar Node.js y npm
          command: |
            sudo apt-get update && sudo apt-get install -y nodejs npm
      - run:
          name: Instalar pip y dependencias
          command: |
            sudo apt-get install -y python3-pip
            pip install -r requirements.txt
      - run:
          name: Instalar Snyk CLI
          command: sudo npm install -g snyk
      - run:
          name: Autenticarse con Snyk
          command: snyk auth $SNYK_TOKEN
      - run:
          name: Ejecutar análisis de vulnerabilidades
          command: snyk test --all-projects

  sonar_scan:
    executor: sonar-executor
    steps:
      - checkout
      - run:
          name: Ejecutar SonarScanner
          command: |
            sonar-scanner               -Dsonar.projectKey=GuilleRsB_Practica-CICD-Guillermo-Rodrigues               -Dsonar.sources=.               -Dsonar.host.url=$SONAR_HOST_URL               -Dsonar.login=$SONAR_LOGIN               -Dsonar.organization=guillersb               -Dsonar.python.coverage.reportPaths=coverage.xml

  artifact:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Login Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Publicar imagen Docker
          command: |
            docker build -t dias-vividos-cli .
            docker tag dias-vividos-cli $DOCKERHUB_USERNAME/dias-vividos-cli:latest
            docker push $DOCKERHUB_USERNAME/dias-vividos-cli:latest

  deploy:
    machine: true
    steps:
      - checkout
      - run:
          name: Instalar kubectl, kind y argocd
          command: |
            curl -Lo kubectl https://dl.k8s.io/release/v1.24.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            curl -Lo kind https://kind.sigs.k8s.io/dl/v0.14.0/kind-linux-amd64 && chmod +x kind && sudo mv kind /usr/local/bin/kind
            curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x argocd && sudo mv argocd /usr/local/bin/argocd
      - run:
          name: Crear clúster Kind
          command: |
            kind create cluster --name dias-vividos-cluster --config kind-config.yaml
      - run:
          name: Exportar KUBECONFIG
          command: |
            mkdir -p ~/.kube
            kind get kubeconfig --name dias-vividos-cluster > ~/.kube/config
      - run:
          name: Esperar clúster
          command: |
            for i in {1..20}; do kubectl cluster-info && break || sleep 10; done
      #- run:
      #    name: Instalar Ingress Controller
      #    command: |
      #      kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/kind/deploy.yaml
      #        echo "Esperando a que los pods estén listos..."
      #        for i in {1..30}; do
      #          READY=$(kubectl get pods -n ingress-nginx -o json | jq -r '.items[] | select(.status.phase=="Running") | .metadata.name' | wc -l)
      #          TOTAL=$(kubectl get pods -n ingress-nginx --no-headers | wc -l)
      #          echo "Listos: $READY / $TOTAL"
      #          if [ "$READY" -eq "$TOTAL" ]; then break; fi
      #          sleep 10
      #        done
      #- run:
      #    name: Esperar a que el Ingress Controller esté disponible
      #    command: |
      #      kubectl wait --namespace ingress-nginx \
      #        --for=condition=ready pod \
      #        --selector=app.kubernetes.io/component=controller \
      #        --timeout=180s
      #- run:
      #    name: ⚠️ Eliminar webhook temporalmente para evitar errores
      #    command: |
      #      echo "Eliminando el webhook para evitar fallo en apply de Ingress..."
      #      kubectl delete validatingwebhookconfiguration ingress-nginx-admission || true
      #- run:
      #    name: Esperar a que el webhook de Ingress esté listo
      #    command: |
      #      echo "Esperando al webhook admission controller de Ingress..."
      #      kubectl wait --namespace ingress-nginx \
      #        --for=condition=available deployment/ingress-nginx-controller \
      #        --timeout=180s
      #- run:
      #    name: Verificar endpoint de webhook
      #    command: |
      #      kubectl get svc -n ingress-nginx
      #      kubectl get endpoints ingress-nginx-controller-admission -n ingress-nginx
      - run:
          name: Instalar ArgoCD
          command: |
            kubectl create namespace argocd || true
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            sleep 60
      - run:
          name: Aplicar manifiestos
          command: |
            kubectl apply -f .circleci/argocd-ingress.yaml
            kubectl apply -f .circleci/application.yaml
      - run:
          name: Añadir dominio a /etc/hosts
          command: |
            echo "127.0.0.1 argocd.local" | sudo tee -a /etc/hosts
      - run:
          name: Esperar a que ArgoCD esté accesible
          command: sleep 20
      - run:
          name: Habilitar port-forward a ArgoCD
          background: true
          command: |
            kubectl port-forward svc/argocd-server -n argocd 8080:443 --address 0.0.0.0
      - run:
          name: Esperar que el puerto esté disponible
          command: sleep 20
      - run:
          name: Esperar a que ArgoCD esté accesible por port-forward
          command: |
            for i in {1..10}; do
              echo "Esperando conexión en el puerto 8080..."
              nc -zv 127.0.0.1 8080 && break || sleep 5
            done
      - run:
          name: Esperar a que el servidor ArgoCD esté listo
          command: |
            kubectl rollout status deployment argocd-server -n argocd --timeout=120s
      - run:
          name: Verificar conexión a ArgoCD
          command: |
            for i in {1..10}; do
              curl -s -k https://localhost:8080 && break || sleep 10
            done
      - run:
          name: Login y sincronizar
          command: |
            argocd login localhost:8080 --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
            argocd app sync dias-vividos-cli
            argocd app get dias-vividos-cli
      - run:
          name: Verificar estado de la app
          command: argocd app get dias-vividos-cli

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - static_analysis:
          requires:
            - build
      - vulnerability_scan:
          requires:
            - build
      - sonar_scan:
          requires:
            - test
      - artifact:
          requires:
            - test
            - lint
            - static_analysis
            - sonar_scan
            - vulnerability_scan
          filters:
            branches:
              only:
                - main
      - deploy:
          requires:
            - artifact
          filters:
            branches:
              only:
                - main